@charset "UTF-8";
/**
     * On definie les variables à ce niveau afin que les variables qui derive de ces valeurs soit ajusté.
     * Example : $wbu-h1-font-size est definie ici, les derivées $wbu-h1-font-size-md, $wbu-h1-font-size-sm vont etre
     * egalement surcharger.
     */
/**
     * On injecte toutes les variables directement dans ce fichier.
     */
/*------------------------------------
  Wbu-Atomique variables
------------------------------------*/
/*------------------------------------
  COLORS
------------------------------------*/
/*------------------------------------
  BORDURES
------------------------------------*/
/*------------------------------------
  TYPOGRAPHY
 il ya une erreur de logique dans la definition des sous taille de police.
 elles ne sont pas proportionnelle à la taille parente.
------------------------------------*/
/* */
/* Page-header-bg */
/* Permet de surcharger les variables bootstrap */
.wbu-angle-up {
  transition: ease 0.3s;
}

.wbu-angle-up::after {
  content: "";
  position: absolute;
  height: 2.2rem;
  width: 2.3rem;
  transition: ease 0.3s;
  transform: translate(-50%, -50%);
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='25' height='25'  viewBox='0 0 384 512' %3E%3Cpath fill='white' d='M352 352c-8.188 0-16.38-3.125-22.62-9.375L192 205.3l-137.4 137.4c-12.5 12.5-32.75 12.5-45.25 0s-12.5-32.75 0-45.25l160-160c12.5-12.5 32.75-12.5 45.25 0l160 160c12.5 12.5 12.5 32.75 0 45.25C368.4 348.9 360.2 352 352 352z'/%3E%3C/svg%3E");
  background-position: center;
  background-repeat: no-repeat;
}

.wbu-angle-right::after {
  content: "";
  position: absolute;
  height: 2.2rem;
  width: 2.3rem;
  transition: transform ease 0.3s, background-image ease 0.3s;
  transform: translate(-50%, -50%);
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg'  version='1.1' x='0px' y='0px' width='25' height='25' viewBox='0 0 66.91 122.88' style='fill:%23fff;' xml:space='preserve'%3E%3Cg%3E%3Cpath fill='white' d='M1.95,111.2c-2.65,2.72-2.59,7.08,0.14,9.73c2.72,2.65,7.08,2.59,9.73-0.14L64.94,66l-4.93-4.79l4.95,4.8 c2.65-2.74,2.59-7.11-0.15-9.76c-0.08-0.08-0.16-0.15-0.24-0.22L11.81,2.09c-2.65-2.73-7-2.79-9.73-0.14 C-0.64,4.6-0.7,8.95,1.95,11.68l48.46,49.55L1.95,111.2L1.95,111.2L1.95,111.2z'/%3E%3C/g%3E%3C/svg%3E");
  background-repeat: no-repeat;
  background-position: center;
  background-position: center;
}

/**
 * version 1 : Juin 2023
 * pour voir les stats d'utilisation en fonction de la taille des ecrans : https://gs.statcounter.com/screen-resolution-stats/mobile/worldwide
 */
/**
 * version 0.
 * Remove before 2x
 * @depreciated value.
 */
/**
 *  Breack point hero.
 */
/**
 *  Breack point h1.
 */
/**
 *  Breack point h2.
 */
/**
 *  Breack point h3.
 */
/**
 *  Breack point h4.
 */
/**
 *  Breack point h5.
 */
/**
 *  Breack point h6.
 */
/**
 * Chargement progressif
 */
/**
 * Affichage de la langue.
 * Model simple.
 */
/**
 *
 */
/**
 * Card rotation
 */
/**
* Translation on hover
*/
/**
* Before cover
*/
/**
* Before cover
*/
/**
 *  pas de retour à la ligne
 */
/**
 *  Mixin for multiline limit text css
 * @depreciated move before 2x, 
 * @use ellipseText
 */
/**
 * Permet de definir le nombre de ligne max a afficher
 */
/*!
 * .list-element{@include list-element(($paddingY:10px, $paddingX:5px, $borderW:1px));}
 */
/**
 *  Images area to preload,
 *  on ajoute sur la div contenant l'image
 */
/**
 *
 */
/**
 * Affet Ombre
 */
/**
 * Pricelist
 */
/*------------------------------------
  Wbu-Atomique variables
------------------------------------*/
/*------------------------------------
  COLORS
------------------------------------*/
/*------------------------------------
  BORDURES
------------------------------------*/
/*------------------------------------
  TYPOGRAPHY
 il ya une erreur de logique dans la definition des sous taille de police.
 elles ne sont pas proportionnelle à la taille parente.
------------------------------------*/
/* */
/* Page-header-bg */
/* Permet de surcharger les variables bootstrap */
.wbu-angle-up {
  transition: ease 0.3s;
}
.wbu-angle-up::after {
  content: "";
  position: absolute;
  height: 2.2rem;
  width: 2.3rem;
  transition: ease 0.3s;
  transform: translate(-50%, -50%);
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='25' height='25'  viewBox='0 0 384 512' %3E%3Cpath fill='white' d='M352 352c-8.188 0-16.38-3.125-22.62-9.375L192 205.3l-137.4 137.4c-12.5 12.5-32.75 12.5-45.25 0s-12.5-32.75 0-45.25l160-160c12.5-12.5 32.75-12.5 45.25 0l160 160c12.5 12.5 12.5 32.75 0 45.25C368.4 348.9 360.2 352 352 352z'/%3E%3C/svg%3E");
  background-position: center;
  background-repeat: no-repeat;
}

.wbu-angle-right::after {
  content: "";
  position: absolute;
  height: 2.2rem;
  width: 2.3rem;
  transition: transform ease 0.3s, background-image ease 0.3s;
  transform: translate(-50%, -50%);
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg'  version='1.1' x='0px' y='0px' width='25' height='25' viewBox='0 0 66.91 122.88' style='fill:%23fff;' xml:space='preserve'%3E%3Cg%3E%3Cpath fill='white' d='M1.95,111.2c-2.65,2.72-2.59,7.08,0.14,9.73c2.72,2.65,7.08,2.59,9.73-0.14L64.94,66l-4.93-4.79l4.95,4.8 c2.65-2.74,2.59-7.11-0.15-9.76c-0.08-0.08-0.16-0.15-0.24-0.22L11.81,2.09c-2.65-2.73-7-2.79-9.73-0.14 C-0.64,4.6-0.7,8.95,1.95,11.68l48.46,49.55L1.95,111.2L1.95,111.2L1.95,111.2z'/%3E%3C/g%3E%3C/svg%3E");
  background-repeat: no-repeat;
  background-position: center;
  background-position: center;
}

/**
 * version 1 : Juin 2023
 * pour voir les stats d'utilisation en fonction de la taille des ecrans : https://gs.statcounter.com/screen-resolution-stats/mobile/worldwide
 */
/**
 * version 0.
 * Remove before 2x
 * @depreciated value.
 */
/**
 *  Breack point hero.
 */
/**
 *  Breack point h1.
 */
/**
 *  Breack point h2.
 */
/**
 *  Breack point h3.
 */
/**
 *  Breack point h4.
 */
/**
 *  Breack point h5.
 */
/**
 *  Breack point h6.
 */
/**
 * Chargement progressif
 */
/**
 * Affichage de la langue.
 * Model simple.
 */
/**
 *
 */
/**
 * Card rotation
 */
/**
* Translation on hover
*/
/**
* Before cover
*/
/**
* Before cover
*/
/**
 *  pas de retour à la ligne
 */
/**
 *  Mixin for multiline limit text css
 * @depreciated move before 2x, 
 * @use ellipseText
 */
/**
 * Permet de definir le nombre de ligne max a afficher
 */
/*!
 * .list-element{@include list-element(($paddingY:10px, $paddingX:5px, $borderW:1px));}
 */
/**
 *  Images area to preload,
 *  on ajoute sur la div contenant l'image
 */
/**
 *
 */
/**
 * Affet Ombre
 */
/**
 * Pricelist
 */
.main-menu {
  position: sticky;
  z-index: 99;
  width: 100%;
  padding-inline: 15px;
  background: #f8f9fa;
  top: 0;
}
.main-menu .menu-wrapper {
  position: relative;
  max-width: 1300px;
  padding: 0px 30px;
  min-height: 70px;
  max-height: 250px;
  line-height: 70px;
  margin: auto;
  display: flex;
  align-items: center;
  justify-content: space-between;
}
.main-menu .menu-wrapper::before {
  content: "";
  position: absolute;
  left: -100%;
  bottom: 0;
  right: -100%;
  height: 1px;
  background-color: #6c757d;
}
.main-menu .menu-wrapper .site-information {
  gap: 10px;
  text-align: center;
}
.main-menu .menu-wrapper .site-information .logo a {
  color: #343a40;
  font-size: 30px;
  font-weight: 600;
  text-decoration: none;
}
.main-menu .menu-wrapper .site-information .logo a img {
  max-height: 100px;
}
.main-menu .menu-wrapper .site-information .site-name {
  line-height: initial;
  text-decoration: none;
  font-weight: bold;
  color: #343a40;
  transition: color 0.3s;
}
.main-menu .menu-wrapper .site-information .site-name:hover {
  color: #008080;
}
.main-menu .menu-wrapper .nav-links {
  display: inline-flex;
  position: relative;
}
.main-menu .menu-wrapper .nav-links .menu-element,
.main-menu .menu-wrapper .nav-links li {
  list-style: none;
  padding: 0;
  overflow: hidden;
}
.main-menu .menu-wrapper .nav-links .menu-element label::before, .main-menu .menu-wrapper .nav-links .menu-element label::after,
.main-menu .menu-wrapper .nav-links li label::before,
.main-menu .menu-wrapper .nav-links li label::after {
  content: none;
}
.main-menu .menu-wrapper .nav-links .menu-element a,
.main-menu .menu-wrapper .nav-links li a {
  color: #343a40;
  text-decoration: none;
  font-size: 20px;
  font-weight: 500;
  padding: 9px 15px;
  border-radius: 5px;
  transition: all 0.3s ease;
  position: relative;
}
.main-menu .menu-wrapper .nav-links .menu-element a::before,
.main-menu .menu-wrapper .nav-links li a::before {
  content: "";
  position: absolute;
  bottom: 0;
  opacity: 0;
  visibility: hidden;
  transition: all 0.3s ease;
  background-color: #008080;
  left: -100%;
  right: 100%;
  height: 2px;
}
.main-menu .menu-wrapper .nav-links .menu-element a:hover::before,
.main-menu .menu-wrapper .nav-links li a:hover::before {
  opacity: 1;
  visibility: visible;
  left: 0;
  right: 0;
}
.main-menu .menu-wrapper .nav-links .menu-element:hover .drop-menu,
.main-menu .menu-wrapper .nav-links .menu-element:hover .mega-box,
.main-menu .menu-wrapper .nav-links li:hover .drop-menu,
.main-menu .menu-wrapper .nav-links li:hover .mega-box {
  max-height: 1000%;
}
.main-menu .menu-wrapper .nav-links .mobile-item {
  display: none;
}
.main-menu .menu-wrapper .nav-links .drop-menu {
  position: absolute;
  background: #f8f9fa;
  width: 180px;
  line-height: 45px;
  padding: 0 10px;
  overflow: hidden;
  box-shadow: 0 6px 10px rgba(0, 0, 0, 0.15);
  max-height: 0;
  transition: max-height 0.5s ease-in;
}
.main-menu .menu-wrapper .nav-links .drop-menu li a {
  width: 100%;
  display: block;
  padding: 0;
  font-weight: 400;
  border-radius: 0px;
}
.main-menu .menu-wrapper .menu-hamburger {
  width: 20px;
  aspect-ratio: 1;
  font-size: 20px;
  cursor: pointer;
  display: none;
}
.main-menu .menu-wrapper .menu-hamburger span, .main-menu .menu-wrapper .menu-hamburger::before, .main-menu .menu-wrapper .menu-hamburger::after {
  display: block;
  content: "";
  height: 3px;
  background-color: #343a40;
  left: 0;
  right: 0;
  position: absolute;
}
.main-menu .menu-wrapper .menu-hamburger::before {
  top: 0;
}
.main-menu .menu-wrapper .menu-hamburger::after {
  top: 100%;
  transform: translateY(-100%);
}
.main-menu .menu-wrapper .menu-hamburger span {
  top: 50%;
  transform: translateY(-50%);
}
.main-menu .menu-wrapper .menu-hamburger.close-btn {
  position: absolute;
  right: 30px;
  top: 10px;
}
.main-menu .menu-wrapper .menu-hamburger.close-btn::after, .main-menu .menu-wrapper .menu-hamburger.close-btn::before {
  top: 50%;
}
.main-menu .menu-wrapper .menu-hamburger.close-btn::after {
  transform: rotate(-45deg);
}
.main-menu .menu-wrapper .menu-hamburger.close-btn::before {
  transform: rotate(45deg);
}
@media screen and (max-width: 970px) {
  .main-menu .menu-wrapper {
    /* custom scroll bar */
  }
  .main-menu .menu-wrapper ::-webkit-scrollbar {
    width: 10px;
  }
  .main-menu .menu-wrapper ::-webkit-scrollbar-track {
    background: #242526;
  }
  .main-menu .menu-wrapper ::-webkit-scrollbar-thumb {
    background: #3a3b3c;
  }
  .main-menu .menu-wrapper #menu-btn:checked ~ .nav-links {
    left: 0%;
  }
  .main-menu .menu-wrapper #menu-btn:checked ~ .btn.menu-btn {
    display: none;
  }
  .main-menu .menu-wrapper #close-btn:checked ~ .btn.menu-btn {
    display: block;
  }
  .main-menu .menu-wrapper .sub-checkbox:checked + .menu-hamburger {
    display: none;
  }
  .main-menu .menu-wrapper .showDrop:checked ~ .drop-menu,
  .main-menu .menu-wrapper #showMega:checked ~ .mega-box {
    max-height: 100%;
  }
  .main-menu .menu-wrapper .menu-hamburger {
    display: block;
  }
  .main-menu .menu-wrapper .nav-links {
    position: fixed;
    height: 100vh;
    width: 100%;
    max-width: 350px;
    top: 0;
    left: -100%;
    background: #f8f9fa;
    display: block;
    padding: 50px 10px;
    line-height: 50px;
    overflow-y: auto;
    box-shadow: 0px 15px 15px rgba(0, 0, 0, 0.18);
    transition: all 0.3s ease;
    z-index: 2;
  }
  .main-menu .menu-wrapper .nav-links::before {
    content: "";
    position: absolute;
    top: 0;
    bottom: 0;
    right: 0;
    width: 1px;
    background-color: #6c757d;
  }
  .main-menu .menu-wrapper .nav-links li {
    margin: 15px 10px;
  }
  .main-menu .menu-wrapper .nav-links li a {
    display: block;
    font-size: 20px;
  }
  .main-menu .menu-wrapper .nav-links .drop-menu {
    position: static;
    opacity: 1;
    top: 65px;
    visibility: visible;
    padding-left: 20px;
    width: 100%;
    max-height: 0px;
    overflow: hidden;
    box-shadow: none;
    transition: all 0.3s ease;
  }
  .main-menu .menu-wrapper .nav-links .drop-menu li {
    margin: 0;
  }
  .main-menu .menu-wrapper .nav-links .drop-menu li a {
    border-radius: 5px;
    font-size: 20px;
  }
  .main-menu .menu-wrapper .nav-links .desktop-item {
    display: none;
  }
  .main-menu .menu-wrapper .nav-links .mobile-item {
    display: block;
    color: #343a40;
    font-size: 20px;
    font-weight: 500;
    padding-left: 15px;
    cursor: pointer;
    border-radius: 5px;
    transition: all 0.3s ease;
  }
  .main-menu .menu-wrapper .nav-links .mobile-item:hover {
    background: #f8f9fa;
  }
}
.main-menu .menu-wrapper input {
  display: none;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/