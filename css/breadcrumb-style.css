@charset "UTF-8";
/**
     * On definie les variables à ce niveau afin que les variables qui derive de ces valeurs soit ajusté.
     * Example : $wbu-h1-font-size est definie ici, les derivées $wbu-h1-font-size-md, $wbu-h1-font-size-sm vont etre
     * egalement surcharger.
     */
/**
     * On injecte toutes les variables directement dans ce fichier.
     */
/*------------------------------------
  Wbu-Atomique variables
------------------------------------*/
/*------------------------------------
  COLORS
------------------------------------*/
/*------------------------------------
  BORDURES
------------------------------------*/
/*------------------------------------
  TYPOGRAPHY
 il ya une erreur de logique dans la definition des sous taille de police.
 elles ne sont pas proportionnelle à la taille parente.
------------------------------------*/
/* */
/* Page-header-bg */
/* Permet de surcharger les variables bootstrap */
.wbu-angle-up {
  transition: ease 0.3s;
}

.wbu-angle-up::after {
  content: "";
  position: absolute;
  height: 2.2rem;
  width: 2.3rem;
  transition: ease 0.3s;
  transform: translate(-50%, -50%);
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='25' height='25'  viewBox='0 0 384 512' %3E%3Cpath fill='white' d='M352 352c-8.188 0-16.38-3.125-22.62-9.375L192 205.3l-137.4 137.4c-12.5 12.5-32.75 12.5-45.25 0s-12.5-32.75 0-45.25l160-160c12.5-12.5 32.75-12.5 45.25 0l160 160c12.5 12.5 12.5 32.75 0 45.25C368.4 348.9 360.2 352 352 352z'/%3E%3C/svg%3E");
  background-position: center;
  background-repeat: no-repeat;
}

.wbu-angle-right::after {
  content: "";
  position: absolute;
  height: 2.2rem;
  width: 2.3rem;
  transition: transform ease 0.3s, background-image ease 0.3s;
  transform: translate(-50%, -50%);
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg'  version='1.1' x='0px' y='0px' width='25' height='25' viewBox='0 0 66.91 122.88' style='fill:%23fff;' xml:space='preserve'%3E%3Cg%3E%3Cpath fill='white' d='M1.95,111.2c-2.65,2.72-2.59,7.08,0.14,9.73c2.72,2.65,7.08,2.59,9.73-0.14L64.94,66l-4.93-4.79l4.95,4.8 c2.65-2.74,2.59-7.11-0.15-9.76c-0.08-0.08-0.16-0.15-0.24-0.22L11.81,2.09c-2.65-2.73-7-2.79-9.73-0.14 C-0.64,4.6-0.7,8.95,1.95,11.68l48.46,49.55L1.95,111.2L1.95,111.2L1.95,111.2z'/%3E%3C/g%3E%3C/svg%3E");
  background-repeat: no-repeat;
  background-position: center;
  background-position: center;
}

/**
 * version 1 : Juin 2023
 * pour voir les stats d'utilisation en fonction de la taille des ecrans : https://gs.statcounter.com/screen-resolution-stats/mobile/worldwide
 */
/**
 * version 0.
 * Remove before 2x
 * @depreciated value.
 */
/**
 *  Breack point hero.
 */
/**
 *  Breack point h1.
 */
/**
 *  Breack point h2.
 */
/**
 *  Breack point h3.
 */
/**
 *  Breack point h4.
 */
/**
 *  Breack point h5.
 */
/**
 *  Breack point h6.
 */
/**
 * Chargement progressif
 */
/**
 * Affichage de la langue.
 * Model simple.
 */
/**
 *
 */
/**
 * Card rotation
 */
/**
* Translation on hover
*/
/**
* Before cover
*/
/**
* Before cover
*/
/**
 *  pas de retour à la ligne
 */
/**
 *  Mixin for multiline limit text css
 * @depreciated move before 2x, 
 * @use ellipseText
 */
/**
 * Permet de definir le nombre de ligne max a afficher
 */
/*!
 * .list-element{@include list-element(($paddingY:10px, $paddingX:5px, $borderW:1px));}
 */
/**
 *  Images area to preload,
 *  on ajoute sur la div contenant l'image
 */
/**
 *
 */
/**
 * Affet Ombre
 */
/**
 * Pricelist
 */
/*------------------------------------
  Wbu-Atomique variables
------------------------------------*/
/*------------------------------------
  COLORS
------------------------------------*/
/*------------------------------------
  BORDURES
------------------------------------*/
/*------------------------------------
  TYPOGRAPHY
 il ya une erreur de logique dans la definition des sous taille de police.
 elles ne sont pas proportionnelle à la taille parente.
------------------------------------*/
/* */
/* Page-header-bg */
/* Permet de surcharger les variables bootstrap */
.wbu-angle-up {
  transition: ease 0.3s;
}
.wbu-angle-up::after {
  content: "";
  position: absolute;
  height: 2.2rem;
  width: 2.3rem;
  transition: ease 0.3s;
  transform: translate(-50%, -50%);
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='25' height='25'  viewBox='0 0 384 512' %3E%3Cpath fill='white' d='M352 352c-8.188 0-16.38-3.125-22.62-9.375L192 205.3l-137.4 137.4c-12.5 12.5-32.75 12.5-45.25 0s-12.5-32.75 0-45.25l160-160c12.5-12.5 32.75-12.5 45.25 0l160 160c12.5 12.5 12.5 32.75 0 45.25C368.4 348.9 360.2 352 352 352z'/%3E%3C/svg%3E");
  background-position: center;
  background-repeat: no-repeat;
}

.wbu-angle-right::after {
  content: "";
  position: absolute;
  height: 2.2rem;
  width: 2.3rem;
  transition: transform ease 0.3s, background-image ease 0.3s;
  transform: translate(-50%, -50%);
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg'  version='1.1' x='0px' y='0px' width='25' height='25' viewBox='0 0 66.91 122.88' style='fill:%23fff;' xml:space='preserve'%3E%3Cg%3E%3Cpath fill='white' d='M1.95,111.2c-2.65,2.72-2.59,7.08,0.14,9.73c2.72,2.65,7.08,2.59,9.73-0.14L64.94,66l-4.93-4.79l4.95,4.8 c2.65-2.74,2.59-7.11-0.15-9.76c-0.08-0.08-0.16-0.15-0.24-0.22L11.81,2.09c-2.65-2.73-7-2.79-9.73-0.14 C-0.64,4.6-0.7,8.95,1.95,11.68l48.46,49.55L1.95,111.2L1.95,111.2L1.95,111.2z'/%3E%3C/g%3E%3C/svg%3E");
  background-repeat: no-repeat;
  background-position: center;
  background-position: center;
}

/**
 * version 1 : Juin 2023
 * pour voir les stats d'utilisation en fonction de la taille des ecrans : https://gs.statcounter.com/screen-resolution-stats/mobile/worldwide
 */
/**
 * version 0.
 * Remove before 2x
 * @depreciated value.
 */
/**
 *  Breack point hero.
 */
/**
 *  Breack point h1.
 */
/**
 *  Breack point h2.
 */
/**
 *  Breack point h3.
 */
/**
 *  Breack point h4.
 */
/**
 *  Breack point h5.
 */
/**
 *  Breack point h6.
 */
/**
 * Chargement progressif
 */
/**
 * Affichage de la langue.
 * Model simple.
 */
/**
 *
 */
/**
 * Card rotation
 */
/**
* Translation on hover
*/
/**
* Before cover
*/
/**
* Before cover
*/
/**
 *  pas de retour à la ligne
 */
/**
 *  Mixin for multiline limit text css
 * @depreciated move before 2x, 
 * @use ellipseText
 */
/**
 * Permet de definir le nombre de ligne max a afficher
 */
/*!
 * .list-element{@include list-element(($paddingY:10px, $paddingX:5px, $borderW:1px));}
 */
/**
 *  Images area to preload,
 *  on ajoute sur la div contenant l'image
 */
/**
 *
 */
/**
 * Affet Ombre
 */
/**
 * Pricelist
 */
.breadcrumb {
  margin-bottom: 0 !important;
}
.breadcrumb .breadcrumb-list {
  gap: 5px;
}
.breadcrumb .breadcrumb-list li {
  position: relative;
  padding-left: 25px;
  overflow: hidden;
}
.breadcrumb .breadcrumb-list li:first-child {
  padding-left: 0;
}
.breadcrumb .breadcrumb-list li:first-child::before,
.breadcrumb .breadcrumb-list li:first-child::after {
  content: none;
}
.breadcrumb .breadcrumb-list li::before,
.breadcrumb .breadcrumb-list li::after {
  content: "";
  position: absolute;
  height: 14px;
  width: 2px;
  left: 10px;
  background-color: #adb5bd;
  border-radius: 50%;
}
.breadcrumb .breadcrumb-list li::before {
  top: 0;
  transform: translateY(-1px) rotate(-56deg);
}
.breadcrumb .breadcrumb-list li::after {
  bottom: 0;
  transform: translateY(-1px) rotate(56deg);
}
.breadcrumb .breadcrumb-list li a {
  text-decoration: none;
}
.breadcrumb .breadcrumb-list .translate-2 {
  transform: translateY(2px);
}
.breadcrumb .breadcrumb-list svg {
  color: currentColor;
  width: 16px;
  aspect-ratio: 1;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/
