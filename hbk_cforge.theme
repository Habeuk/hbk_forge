<?php

use Drupal\Core\Theme\ThemeManagerInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\Core\Url;
use Drupal\Core\Routing\UrlMatcher;
use Drupal\migrate_drupal\Plugin\migrate\source\ContentEntity;
use Google\Service\HangoutsChat\Resource\Dms;

/**
 * @file
 * Functions to support theming in the HBK cforge theme.
 */

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function hbk_cforge_preprocess_html(&$variables) {
}

/**
 * Implements hook_preprocess_HOOK() for page.html.twig.
 */
function hbk_cforge_preprocess_page(&$variables) {
}



/**
 * Implements hook_form_alter().
 */

function hbk_cforge_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
    if (strpos($form["#action"], "search") !== FALSE) {
        $form["#attributes"]["class"][] =  "my-search-form";
    }
}

/**
 * Implements hook_form_alter().
 */

/**
 * Implements hook_preprocess_HOOK() for views_view_style.html.twig
 */
function hbk_cforge_preprocess_views_view_unformatted(&$variables) {
    $route_match = \Drupal::service('current_route_match');
    $page_entity = $route_match->getParameters()->all();
    // dump($variables["view"]);
    /**
     * @var Symfony\Component\HttpFoundation\RequestStack $request_stack
     */
    $request_stack = \Drupal::service('request_stack');
    $current_request = $request_stack->getCurrentRequest();
    $current_url = $current_request;

    if ($current_url->getPathInfo()) {
        $variables["is_home"] = TRUE;
    };
}


/**
 * Implements hook_preprocess_HOOK() for views_view_style.html.twig
 */
function hbk_cforge_preprocess_views_view_table(&$variables) {
    $variables["cell_header"] = [];
    foreach ($variables["header"] as $key => $header) {
        $variables["cell_header"][] = $header["content"];
    }
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function hbk_cforge_preprocess_node(&$variables) {
    if (isset($variables['content']['field_image']) && !isset($variables['content']['image'])) {

        $image_id = $variables["content"]["field_image"][0]["#item"]->getvalue()["target_id"];
        unset($variables["content"]["field_image"]);
        $file = File::load($image_id);
        $imageStyle = ImageStyle::load('large');
        $uri = $imageStyle->buildUrl($file->getFileUri());

        $variables["content"]["image"] = [
            '#theme' => 'image',
            '#uri' => $uri,
            '#alt' => 'Description de l\'image',
        ];
    }
    if (isset($variables['content']['field_tags']) && !isset($variables['tags'])) {
        $i = 0;
        $variables['content']['tags'] = [];
        $tags = $variables['content']['field_tags'];
        while (isset($tags[$i])) {
            $variables['content']['tags'][] = $tags[$i++];
        }
        unset($variables['content']['field_tags']);
    }
    if (!Drupal::currentUser()->isAuthenticated() && empty($variables["content"]["comment"][0]["comments"])) {
        // dump($variables["content"]["comment"][0]);
        unset($variables["content"]["comment"]);
    }
    /**
     * @var \Drupal\Node\Entity\Node $image_entity
     */
    // $image_entity = $variables["content"]["image"]["#object"];
    // dump([$imageStyle, $file, $file->getFileUri()]);
}


/**
 * Implements hook_theme() to define the theme hook for the slider_block.
 */
function hbk_cforge_theme($existing, $type, $theme, $path) {
    // dump([$existing, $type, $theme, $path]);
    return [
        'slider_block' => [
            'variables' => [
                'content' => [],
            ],
        ],
    ];
}

/**
 * Theme function for the slider_block.
 */
function theme_slider_block($variables) {
    $content = $variables['content'];

    // Build the HTML output for the slider_block.
    // ...

    return $content;
}

/**
 * Implements hook_block()
 */
function hbk_cforge_preprocess_block($variables) {
    // dump($variables);
}


/**
 * Implements hook_views_pre_render().
 */
function hbk_cforge_views_pre_render(\Drupal\views\ViewExecutable $view) {
}

/**
 * Implements hook_preprocess_HOOK() for views_view.html.twig
 */
function hbk_cforge_preprocess_comment__comment(&$variables) {
    /**
     * @var \Drupal\User\Entity\User $user
     */
    $user = \Drupal::entityTypeManager()->getStorage("user")->load(2);
    $variables["user_name"] = $user->getAccountName();
    $variables["has_profile_picture"] = $user->get("user_picture")->entity ? TRUE : FALSE;
    // dump($variables);
}

/**
 * Implements hook_preprocess_HOOK() for fieldset
 */
function hbk_cforge_preprocess_fieldset(&$variables) {
    /**
     * @var Drupal\Core\StringTranslation\TranslatableMarkup $markup
     */
    $markup =  $variables["legend"]["title"]["#markup"];
    $string_title = preg_replace('/[^A-Za-z0-9\-]/', '', (string) $markup);
    $variables["legend"]["string_title"] = $string_title . (string) rand(1000, 9999);
    // dump($variables["legend"]["string_title"]);
}

/**
 * Implements hook_preprocess_HOOK() menu__main
 */
function hbk_cforge_preprocess_menu__main(&$variables) {
    $site_name =   \Drupal::config('system.site')->get('name');
    //set the variable site name for render
    $variables["site_name"] = $site_name;


    $config = \Drupal::config('system.theme.global');
    $logo_path = $config->get('logo.path');


    // Load the file entity using the file ID.
    if ($logo_path) {
        # code...

        $site_logo = [
            '#theme' => 'image',
            '#uri' => $logo_path,
            '#alt' => 'Description de l\'image',
        ];

        //set the variables for  the site logo
        $variables["site_logo"] = $site_logo;
    }
}

/**
 * Implements hook_preprocess_HOOK() for views_view.html.twig
 */
function hbk_cforge_preprocess_breadcrumb(&$variables) {
    if ($variables['breadcrumb']) {
        $request = \Drupal::request();
        $route_match = \Drupal::routeMatch();
        $page_title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());
        if (!empty($page_title)) {
            $variables['breadcrumb'][] = array(
                'text' => $page_title
            );
            // Add cache context based on url.
            $variables['#cache']['contexts'][] = 'url';
        }
    }
}
