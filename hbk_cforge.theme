<?php
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\Core\Render\Element;
use Drupal\hbk_cforge\Preprocess;

/**
 *
 * @file
 * Functions to support theming in the HBK cforge theme.
 */

/**
 * implment hook_library_info_alter
 *
 * @param array $libraries
 * @param string $extension
 */
function hbk_cforge_library_info_alter(&$libraries, $extension) {
  $cforge_libs = [
    "global",
    "vendor",
    "menu",
    "slider",
    "breadcrumb",
    "teaser",
    "text-image",
    "general"
  ];
  foreach ($cforge_libs as $lib) {
    $lib_full_name = $lib . "-style";
    $current_theme = \Drupal::Config('hbk_cforge.settings')->get("hbk_cforge")["current_theme"] ?? "";
    if (isset($libraries[$lib_full_name])) {
      $styles = $libraries[$lib_full_name]["css"]["theme"];
      foreach ($styles as $path => $value) {
        $arr_path = explode("/", $path);
        $arr_path = array_merge([
          "css",
          $current_theme
        ], array_slice($arr_path, 1));
        unset($libraries[$lib_full_name]["css"]["theme"][$path]);
        $libraries[$lib_full_name]["css"]["theme"][implode("/", $arr_path)] = $value;
      }
    }
  }
}

/**
 * Implement hook_preprocess_image
 *
 * @param int $variables
 */
function hbk_cforge_preprocess_image(&$variables) {
  $variables["attributes"]['class'][] = 'img-fluid';
}

/**
 * implment hook_preprocess_HOOK
 *
 * @param array $variables
 */
function hbk_cforge_preprocess_image_widget(&$variables) {
  if (isset($variables['data']['alt'])) {
    if (!isset($variables['data']['alt']['#wrapper_attributes']['class']))
      $variables['data']['alt']['#wrapper_attributes']['class'] = [];
    $variables['data']['alt']['#wrapper_attributes']['class'][] = 'mt-0';
  }
  if (isset($variables['data']['remove_button'])) {
    if (!isset($variables['data']['remove_button']['#attributes']['class']))
      $variables['data']['remove_button']['#attributes']['class'] = [];
    $variables['data']['remove_button']['#attributes']['class'][] = 'btn-sm';
    $variables['data']['remove_button']['#attributes']['class'][] = 'btn-danger';
  }
}

/**
 * Implements hook_preprocess_HOOK()
 */
function hbk_cforge_preprocess_region(&$variables) {
  if (!isset($variables['attributes']['class']))
    $variables['attributes']['class'] = [];
  $variables['attributes']['class'][] = "region";
  $variables['attributes']['class'][] = "region--" . $variables['region'];
}

/**
 * Implements hook_preprocess_HOOK() for page.html.twig.
 */
function hbk_cforge_preprocess_page(&$variables) {
  $site_name = \Drupal::config('system.site')->get('name');
  $variables["site_name"] = $site_name;
  
  $site_configs = \Drupal::Config('hbk_cforge.settings')->get();
  if (isset($site_configs["social"]) && $site_configs["social"]["show_social"]) {
    $variables["socials"] = [
      "title" => $site_configs["social"]["title"]
    ];
    $variables["socials"]["socials"] = $variables["socials"] + $site_configs["social"];
    $variables["socials"]["svg_class"] = $variables["socials"]["socials"]["show_bottom_svg"] ? "with-svg" : "no-svg";
  }
  Preprocess::getSiteInformation($variables);
}

/**
 * Implements hook_form_alter().
 */
function hbk_cforge_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if (strpos($form["#action"], "search") !== FALSE) {
    $form["#attributes"]["class"][] = "my-search-form";
  }
}

/**
 * Implements hook_form_alter().
 */

/**
 * Implements hook_preprocess_HOOK() for views_view_style.html.twig
 */
function hbk_cforge_preprocess_views_view_unformatted(&$variables) {
  $route_match = \Drupal::service('current_route_match');
  $page_entity = $route_match->getParameters()->all();
  /**
   *
   * @var Symfony\Component\HttpFoundation\RequestStack $request_stack
   */
  $request_stack = \Drupal::service('request_stack');
  $current_request = $request_stack->getCurrentRequest();
  $current_url = $current_request;
  
  if ($current_url->getPathInfo()) {
    $variables["is_home"] = TRUE;
  }
  ;
}

/**
 * Implements hook_preprocess_HOOK() for views_view_style.html.twig
 */
function hbk_cforge_preprocess_views_view_table(&$variables) {
  $variables["cell_header"] = [];
  foreach ($variables["header"] as $key => $header) {
    $variables["cell_header"][] = $header["content"];
  }
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function hbk_cforge_preprocess_node(&$variables) {
  if (!empty($variables['node'])) {
    
    // Recuperation de l'image afin de definir le style de rendu.
    /**
     *
     * @var \Drupal\node\Entity\Node $node
     */
    $node = $variables['node'];
    $imgs = [];
    if ($node->hasField('image')) {
      $imgs = $node->get('image')->getValue();
    }
    elseif ($node->hasField('field_image')) {
      $imgs = $node->get('field_image')->getValue();
    }
    $variables["content"]["image"] = [];
    if ($imgs) {
      foreach ($imgs as $imgInfo) {
        $file = File::load($imgInfo['target_id']);
        $imageStyle = ImageStyle::load('image_article');
        $uri = $imageStyle->buildUrl($file->getFileUri());
        $variables["content"]["image"][] = [
          '#theme' => 'image',
          '#uri' => $uri,
          '#alt' => $imgInfo['alt']
        ];
      }
    }
    // Recupere les valeurs de tags.
    if (!empty($variables['content']['field_tags'])) {
      $keys = Element::children($variables['content']['field_tags']);
      $elements = [];
      foreach ($keys as $key) {
        $elements[] = $variables['content']['field_tags'][$key];
      }
      $variables['content']['tags'] = $elements;
    }
    elseif (!empty($variables['tags'])) {
      $keys = Element::children($variables['content']['tags']);
      $elements = [];
      foreach ($keys as $key) {
        $elements[] = $variables['content']['field_tags'][$key];
      }
      $variables['content']['tags'] = $elements;
    }
  }
}

/**
 * Implements hook_theme() to define the theme hook for the slider_block.
 */
function hbk_cforge_theme($existing, $type, $theme, $path) {
  return [
    'slider_block' => [
      'variables' => [
        'content' => []
      ]
    ]
  ];
}

/**
 * Theme function for the slider_block.
 */
function theme_slider_block($variables) {
  $content = $variables['content'];
  
  // Build the HTML output for the slider_block.
  // ...
  
  return $content;
}

/**
 * Implements hook_views_pre_render().
 */
function hbk_cforge_views_pre_render(\Drupal\views\ViewExecutable $view) {
}

/**
 * Implements hook_preprocess_HOOK() for views_view.html.twig
 */
function hbk_cforge_preprocess_comment__comment(&$variables) {
  /**
   *
   * @var \Drupal\user\Entity\User $user
   */
  $user = \Drupal::entityTypeManager()->getStorage("user")->load(2);
  $variables["user_name"] = $user->getAccountName();
  $variables["has_profile_picture"] = $user->get("user_picture")->entity ? TRUE : FALSE;
}

/**
 * Implements hook_preprocess_HOOK() menu__main
 */
function hbk_cforge_preprocess_menu__main(&$variables) {
  Preprocess::getSiteInformation($variables);
}

/**
 * Implements hook_preprocess_HOOK() for views_view.html.twig
 */
function hbk_cforge_preprocess_breadcrumb(&$variables) {
  if ($variables['breadcrumb']) {
    $request = \Drupal::request();
    $route_match = \Drupal::routeMatch();
    $page_title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());
    if (!empty($page_title)) {
      $variables['breadcrumb'][] = array(
        'text' => $page_title
      );
      // Add cache context based on url.
      $variables['#cache']['contexts'][] = 'url';
    }
  }
}

/**
 * Implements hook_preprocess_HOOK()
 */
function hbk_cforge_preprocess_details(&$variables) {
  $variables["field_set_id"] = str_replace("-", "", ucwords($variables["element"]["#id"]));
}

/**
 * Implements hook_preprocess_HOOK()
 */
function hbk_cforge_preprocess_fieldset(&$variables) {
  $variables["field_set_id"] = str_replace("-", "", ucwords($variables["element"]["#id"]));
  $title = $variables["legend"]["title"];
  /**
   *
   * @var Drupal\Core\Render\Renderer $renderer
   */
  $renderer = \Drupal::service('renderer');
  $variables["string_title"] = $renderer->renderPlain($title)->__toString();
}
