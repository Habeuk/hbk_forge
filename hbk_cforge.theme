<?php

use Drupal\Core\Theme\ThemeManagerInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\Core\Url;
use Drupal\Core\Routing\UrlMatcher;

/**
 * @file
 * Functions to support theming in the HBK cforge theme.
 */

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function hbk_cforge_preprocess_html(&$variables) {
}

/**
 * Implements hook_preprocess_HOOK() for page.html.twig.
 */
function hbk_cforge_preprocess_page(&$variables) {
}

/**
 * Implements hook_preprocess_HOOK() for views_view.html.twig
 */
function hbk_cforge_preprocess_views_view_unformatted(&$variables) {
    $route_match = \Drupal::service('current_route_match');
    $page_entity = $route_match->getParameters()->all();
    // dump($variables["view"]);
    /**
     * @var Symfony\Component\HttpFoundation\RequestStack $request_stack
     */
    $request_stack = \Drupal::service('request_stack');
    $current_request = $request_stack->getCurrentRequest();
    $current_url = $current_request;

    if ($current_url->getPathInfo()) {
        $variables["is_home"] = TRUE;
    };
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function hbk_cforge_preprocess_node(&$variables) {
    if (isset($variables['content']['field_image']) && !isset($variables['content']['image'])) {

        $image_id = $variables["content"]["field_image"][0]["#item"]->getvalue()["target_id"];
        unset($variables["content"]["field_image"]);
        $file = File::load($image_id);
        $imageStyle = ImageStyle::load('large');
        $uri = $imageStyle->buildUrl($file->getFileUri());

        $variables["content"]["image"] = [
            '#theme' => 'image',
            '#uri' => $uri,
            '#alt' => 'Description de l\'image',
        ];
    }
    if (isset($variables['content']['field_tags']) && !isset($variables['tags'])) {
        $i = 0;
        $variables['content']['tags'] = [];
        $tags = $variables['content']['field_tags'];
        while (isset($tags[$i])) {
            $variables['content']['tags'][] = $tags[$i++];
        }
        unset($variables['content']['field_tags']);
    }
    if (!Drupal::currentUser()->isAuthenticated() && empty($variables["content"]["comment"][0]["comments"])) {
        // dump($variables["content"]["comment"][0]);
        unset($variables["content"]["comment"]);
    }
    /**
     * @var \Drupal\Node\Entity\Node $image_entity
     */
    // $image_entity = $variables["content"]["image"]["#object"];
    // dump([$imageStyle, $file, $file->getFileUri()]);
}

/**
 * Implements hook_theme_suggestions_menu_alter().
 */
function hbk_cforge_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
    // // Récupérer les informations de suggestion de menu existantes
    // // Ajouter une suggestion de menu personnalis￩e avec les informations reçues
    // if ($variables["menu_name"] === "main") {
    //     # code...
    //     $CustomSuggestions = 'my__menu';
    //     $suggestions[] = $CustomSuggestions;
    //     dump($suggestions);
    // }
}

/**
 * Implements hook_theme() to define the theme hook for the slider_block.
 */
function hbk_cforge_theme($existing, $type, $theme, $path) {
    // dump([$existing, $type, $theme, $path]);
    return [
        'slider_block' => [
            'variables' => [
                'content' => [],
            ],
        ],
    ];
}

/**
 * Theme function for the slider_block.
 */
function theme_slider_block($variables) {
    $content = $variables['content'];

    // Build the HTML output for the slider_block.
    // ...

    return $content;
}

/**
 * Implements hook_views_pre_render().
 */
function hbk_cforge_views_pre_render(\Drupal\views\ViewExecutable $view) {
    // Vérifiez si la vue est la vue souhaitée.
    // Obtenez le contenu des régions.

    // dump(\Drupal::service('renderer'));
    // dump($view);    
    // $header_content = \Drupal::service('renderer')->renderRoot($view->header['area']);
    // $footer_content = \Drupal::service('renderer')->renderRoot($view->footer['area']);

    // // Faites quelque chose avec le contenu des régions, par exemple l'ajouter aux résultats de la vue.
    // $view->attachment_before = $header_content;
    // $view->attachment_after = $footer_content;
}
