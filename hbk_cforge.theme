<?php

use Drupal\Core\Theme\ThemeManagerInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;

/**
 * @file
 * Functions to support theming in the HBK cforge theme.
 */

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function hbk_cforge_preprocess_html(&$variables) {
}

/**
 * Implements hook_preprocess_HOOK() for page.html.twig.
 */
function hbk_cforge_preprocess_page(&$variables) {
}

/**
 * Implements hook_preprocess_HOOK() for views_view.html.twig
 */
function hbk_cforge_preprocess_views_view(&$variables) {
    // dump($variables);
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function hbk_cforge_preprocess_node(&$variables) {
    $image_id = $variables["content"]["field_image"][0]["#item"]->getvalue()["target_id"];
    unset($variables["content"]["field_image"]);
    $file = File::load($image_id);
    $imageStyle = ImageStyle::load('large');
    $uri = $imageStyle->buildUrl($file->getFileUri());

    $variables["content"]["image"] = [
        '#theme' => 'image',
        '#uri' => $uri,
        '#alt' => 'Description de l\'image',
    ];
    /**
     * @var \Drupal\Node\Entity\Node $image_entity
     */
    // $image_entity = $variables["content"]["image"]["#object"];
    // dump([$imageStyle, $file, $file->getFileUri()]);
}

/**
 * Implements hook_theme_suggestions_menu_alter().
 */
function hbk_cforge_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
    // // Récupérer les informations de suggestion de menu existantes
    // // Ajouter une suggestion de menu personnalis￩e avec les informations reçues
    // if ($variables["menu_name"] === "main") {
    //     # code...
    //     $CustomSuggestions = 'my__menu';
    //     $suggestions[] = $CustomSuggestions;
    //     dump($suggestions);
    // }
}

/**
 * Implements hook_theme() to define the theme hook for the slider_block.
 */
function hbk_cforge_theme($existing, $type, $theme, $path) {
    // dump([$existing, $type, $theme, $path]);
    return [
        'slider_block' => [
            'variables' => [
                'content' => [],
            ],
        ],
    ];
}

/**
 * Theme function for the slider_block.
 */
function theme_slider_block($variables) {
    $content = $variables['content'];

    // Build the HTML output for the slider_block.
    // ...

    return $content;
}
